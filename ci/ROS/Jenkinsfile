def kpsrThirdPartiesECR="337955887028.dkr.ecr.us-east-2.amazonaws.com/kpsr-docker-registry/github/kpsr-thirdparties"
def kpsrCoreECR="337955887028.dkr.ecr.us-east-2.amazonaws.com/kpsr-docker-registry/github/kpsr-core"
def kpsrRoboticsECR="337955887028.dkr.ecr.us-east-2.amazonaws.com/kpsr-docker-registry/github/kpsr-robotics"

pipeline {
    agent any
    environment {
     local_branch = env.GIT_BRANCH.replaceAll('/','_')
    }

    stages {
        stage('Dependencies') {
            steps {
                echo 'Pull dependencies from repository'
                sh 'rm  ~/.dockercfg || true'
                sh 'rm ~/.docker/config.json || true'

                script {
                    docker.withRegistry("https://${kpsrThirdPartiesECR}", "ecr:us-east-2:AWS_ECR_CREDENTIALS") {
                        docker.image("${kpsrThirdPartiesECR}:ROS").pull()
                    }
                    docker.withRegistry("https://${kpsrCoreECR}", "ecr:us-east-2:AWS_ECR_CREDENTIALS") {
                        docker.image("${kpsrCoreECR}:bugfix_docker-ci-include-files_ROS").pull()
                    }
                }

                sh "docker tag ${kpsrThirdPartiesECR}:ROS kpsr-thirdparties:ROS"
                sh "docker tag ${kpsrCoreECR}:bugfix_docker-ci-include-files_ROS kpsr-core:bugfix_docker-ci-include-files_ROS"
            }
        }
        stage('Build') {
            steps {
                
                sh "docker build -f ./ci/ROS/Dockerfile_ROS . --rm --build-arg=BUILD_ID=${BUILD_ID} \
                -t kpsr-robotics:${local_branch}_${BUILD_ID}_ROS"

                sh 'container_id=$(docker create $(docker images -a -f "label=kpsr-robotics=builder" -f  "label=BUILD_ID=${BUILD_ID}" --format "{{.ID}}")) && \
                    docker cp $container_id:/opt/kpsr-robotics/build/copy_cppcheck.sh . && \
                    bash copy_cppcheck.sh $container_id && \
                    docker cp $container_id:/opt/kpsr-robotics/build/coverage.xml .'

                // Run cppcheck
                publishCppcheck(
                    pattern: '**/cppcheck-result.xml',
                    ignoreBlankFiles: false, threshold: '19',
                    allowNoReport: false,
                    newThreshold: '', failureThreshold: '',
                    newFailureThreshold: '', healthy: '', unHealthy: '',
                    severityError: true,
                    severityWarning: true,
                    severityStyle: true,
                    severityPerformance: true,
                    severityInformation: true,
                    severityNoCategory: true,
                    severityPortability: true,
                    XSize: 1000, YSize: 200,
                    numBuildsInGraph: 0,
                    displayAllErrors: true,
                    displayErrorSeverity: true,
                    displayNoCategorySeverity: true,
                    displayPerformanceSeverity: true,
                    displayPortabilitySeverity: true,
                    displayStyleSeverity: true,
                    displayWarningSeverity: true
                )

                cobertura(coberturaReportFile: 'coverage.xml,code_generator/kpsr_codegen/coverage.xml', failUnhealthy: false, failUnstable: false, onlyStable: false)

            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
                script {
                    // if we are in a PR
                    if (env.CHANGE_ID) {
                       publishCoverageGithub(filepath:'coverage.xml', coverageXmlType: 'cobertura', comparisonOption: [ value: 'optionFixedCoverage', fixedCoverage: '0.80' ], coverageRateType: 'Line')
                    }
                }
            }
        }
        stage('Publish') {
            steps {
                echo 'Publish to ECR.'
                script {
                    docker.withRegistry("https://${kpsrRoboticsECR}", "ecr:us-east-2:AWS_ECR_CREDENTIALS") {
                        sh "docker tag kpsr-robotics:${local_branch}_${BUILD_ID}_ROS ${kpsrRoboticsECR}:${local_branch}_ROS && docker push ${kpsrRoboticsECR}:${local_branch}_ROS"
                    }
                }
            }
        }
    }
    post {
        always {
          // Pruning
          sh 'docker container prune --force --filter label=kpsr-robotics=builder --filter  label=BUILD_ID=${BUILD_ID}'
          sh 'docker image prune --force --filter label=kpsr-robotics=builder --filter label=BUILD_ID=${BUILD_ID}'
          sh 'docker rmi --force $(docker images --filter "reference=kpsr-robotics:*_${BUILD_ID}_*" -q)'
        }
    }
}

